% This file contains various other people's bibliographies on compiler
% optimizations.  It probably shouldn't be edited/updated, but might be
% useful for some purpose.




@Article{HennessyCPS2003,
  author = 	 "John Hennessy and Daniel Citron and David Patterson and Guri Sohi",
  title = 	 "The Use and Abuse of SPEC: An ISCA Panel",
  journal = 	 "IEEE Micro",
  year = 	 2003,
  volume = 	 23,
  number = 	 4,
  pages = 	 "73--77",
  month = 	 jul # "/" # aug,
  abstract =
   "The majority of papers published by computer architecture conferences
   use the spec benchmark suite to measure performance. However, many
   researchers use only a subset of the suite. What's more surprising is
   how few people explain their reasons for subsetting.",
}


@InProceedings{RauLTS92,
  author = 	 "B. R. Rau and M. Lee and P. P. Tirumalai and M. S. Schlansker",
  title = 	 "Register allocation for software pipelined loops",
  pages =	 "283--299",
  crossref =	 "PLDI92"
}



@Article{Henning2000,
  author = 	 "John L. Henning",
  title = 	 "{SPEC} {CPU2000}: Measuring {CPU} performance in the new millennium",
  journal = 	 computer,
  year = 	 2000,
  volume = 	 33,
  number = 	 7,
  pages = 	 "28--35",
  month = 	 jul,
}

@article{RamseyF97,
 author = {Norman Ramsey and Mary F. Fern\'andez},
 title = {Specifying representations of machine instructions},
 journal = TOPLAS,
 volume = {19},
 number = {3},
 year = {1997},
 pages = {492--524},
 }

@InProceedings{RamseyD98,
  author = 	 {Norman Ramsey and Jack W. Davidson},
  title = 	 {Machine Descriptions to Build Tools for Embedded Systems},
  booktitle = 	 LCTES98,
  year =	 1998,
  month =        LCTES98date,
  address =	 LCTES98addr,
  pages =        "176--192",
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% University of Arizona
%%%





















































































%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Rice Ph.D. qualifying exam syllabus for compiler optimization
%%%

@book{AhoEtal85,
	author = "A. Aho and R. Sethi and J. Ullman",
	title = "Compilers-Principles, Techniques, and Tools", 
	publisher = "Addison-Wesley",
	year = 1985 }
@incollection{AllenEtal71,
	editor = "R. Rustin",
	booktitle = "Design and Optimization of Compilers", 
	publisher = "Prentice-Hall",
	title = "A Catalog of Optimizing Transformations", 
	author = "F.E. Allen and J. Cocke",
	pages = "1--30",
	year = 1971 }

@article{Loveman77,
	author = "D. B. Loveman",
	title = "Program Improvement by Source-to-Source Transformation",
	journal = "Journal of the ACM",
	volume = 20,
	number = 1,
	pages = "121--145",
	month = jan,
	year = 1977 }

@incollection{Kennedy81,
	author = "K. Kennedy",
	title = "A Survey of Data Flow Analysis Techniques",
	booktitle = "Program Flow Analysis",
	editor = "S. Muchnick and N. Jones",
	publisher = "Prentice-Hall",
	pages = "5--54",
	year = 1981 }

@article{Tarjan74,
	author = "R. E. Tarjan",
	title = "Testing Flow Graph Reducibility",
	journal = JCSS, 
	pages = "355--365",
	volume = 9,
	year = 1974 }

@article{Tarjan81,
	author = "R. E. Tarjan",	
	title = "A Unified Approach to Path Problems",
	journal = "Journal of the ACM",
	volume =  28,
	number = 3,
	month = jul,
	pages = "577--593",
	year = 1981 }

@article{KamUllman76,
	author = "J. B. Kam and J. D. Ullman",
	title = "Global Data Flow Analysis and Iterative Algorithms",
	journal = "Journal of the ACM",
	volume = 23,
	number = 1,
	pages = "158--171",
	month = jan,
	year = 1976 }

@article{KamUllman77,
	author = "J. B. Kam and J. D. Ullman",
	title = "Monotone Data Flow Analysis Frameworks",
	journal = "Acta Informatica",
	volume = 7,
	pages = "305--317",
	year = 1977 }

@inproceedings{WegmanZadeck85,
	author = "M. Wegman and K. Zadeck",
	title = "Constant Propagation with Conditional Branches",
	booktitle = "Conference Record of the Twelfth ACM Symposium on
				Principles of Programming Languages",
	pages = "291--299",
	month = jan,
	year = 1985 }

@inproceedings{KuckEtal81,
	author = "D. J. Kuck and others",
	title = "Dependence Graphs and Compiler Optimization",
	booktitle = "Conference Record of the Eighth ACM Symposium on
				Principles of Programming Languages",
	pages = "207--218",
	month = jan,
	year = 1981 }

@article{AllenKennedy8487,
	author = "J. R. Allen and K. Kennedy",
	title = "Automatic Translation of {Fortran} Programs to Vector Form",
	note = "Also available as Rice COMP TR84-9, July 1984",
	journal = "ACM Transactions on Programming Languages and Systems",
	month = oct,
	year = 1987 }

@article{FerranteEtal87,
	author = "J. Ferrante and K. J. Ottenstein and J. D. Warren",
	title = "The Program Dependence Graph and its Use in Optimization",
	journal = "ACM Transactions on Programming Languages and Systems",
	month = jul,
	pages = "319--349",
	year = 1987 }

@inproceedings{TrioletEtal86,
	author = "R. Triolet and F. Irigoin and P. Feautrier",
	title = "Direct Parallelization of Call Statements",
	booktitle = "ACM SIGPLAN 1986 Symposium on Compiler Construction",
	pages = "176--185",
	month = jun,
	year = 1986 }

@incollection{Banerjee88a,
	author = "U. Banerjee",
	title = "Dependence Tests",
	booktitle = "Dependence Analysis for Supercomputing",
	publisher = "Kluwer Academic Publishers",
	address = "Norwell, MA",
	chapter = 6,
	pages = "101--148",
	year = 1988 }

@inproceedings{AllenEtal87,
	author = "R. Allen and D. Callahan and K. Kennedy",
	title = "Automatic Decomposition of Scientific Programs
		for Parallel Execution",
	booktitle = "Conference Record of the Fourteenth ACM Symposium
		on Principles of Programming Languages",
	pages = "63--76",
	month = jan,
	year = 1987 }


@article{HennessyGross83,
	author = "J. Hennessy and T. Gross",
	title = "Postpass Code Optimization of Pipeline Constraints",
	journal = "ACM Transactions on Programming Languages and Systems",
	pages = "422--448",
	month = jul,
	year = 1983 }

@inproceedings{GibbonsMuchnick86,
	author = "P. B. Gibbons and S. S. Muchnick",
	title = "Efficient Instruction Scheduling for a Pipelined
			Architecture",
	booktitle = "{ACM SIGPLAN} '86 Symposium on Compiler Construction",
	pages = "11--16",
	month = jun,
	year = 1986 }

@article{TanenbaumEtal82,
	author = " A. S. Tanenbaum and H. van Staveren and J. W. Stevenson",
	title = "Using Peephole Optimization on Intermediate Code",
	journal = "ACM Transactions on Programming Languages and Systems",
	volume = 4,
	number = 1,
	pages = "21--36",
	month = jan,
	year = 1982 }

@inproceedings{FraserWendt86,
	author = "C. W. Fraser and A. L. Wendt",
	title = "Integrating Code Generation and Optimization",
	booktitle = "{ACM SIGPLAN} '86 Symposium on Compiler Construction",
	pages = "242--248",
	month = jun,
	year = 1986 }

@inproceedings{GlanvilleGraham78,
	author = "R. S. Glanville and S. L. Graham",
	title = "A New Method for Compiler Code Generation",
	booktitle = "Conference record of the Fifth Symposium on Priciples
				Programming Languages",
	pages = "231--240",
	month = jan,
	year = 1978 }

@inproceedings{AikenNicolau88,
	author = "A. Aiken and A. Nicolau",
	title = "Optimal Loop Parallelization",
	booktitle = "{ACM SIGPLAN} '88 Symposium on Compiler Construction",
	pages = "308--317",
	month = jun,
	year = 1988}


@article{ChaitinEtal81,
	author = "G. J. Chaitin and M. A. Auslander and A. K. Cocke and 
		M. E. Hopkins and P. W. Markstein",
	title = "Register Allocation via Coloring",
	journal = "Computer Languages",
	volume = 6,
	pages = "47--57",
	year = 1981 }

@inproceedings{ChowHennessy84,
	author = "F. Chow and J. Hennessy",
	title = "Register Allocation by Priority-based Coloring",
	booktitle = "{ACM SIGPLAN} '84 Symposium on Compiler Construction",
	pages = "222--232",
	month = jun,
	year = 1984 }

@inproceedings{LarusHilfinger86,
	author = "J. R. Larus and R. N. Hilfinger",
	title = "Register Allocation in the {SPUR} {Lisp} Compiler",
	booktitle = "{ACM SIGPLAN} '86 Symposium on Compiler Construction",
	pages = "255--263",
	month = jun,
	year = 1986}

@mastersthesis{Steele78,
	author = "G. Steele",
	title = "{RABBIT}: A Compiler for {Scheme} (A Study in Compiler 
		Optimization)",
	note = "Available as Technical Report 474",
	school = "Artifical Intelligence Laboratory, MIT",
	year = 1978}

@inproceedings{GoldbergPaige84,
	author = "A. Goldberg and R. Paige",
	title = "Stream processing",
	booktitle = "Conference Record of the 1984 Symposium on {Lisp} 
				and Functional Programming",
	pages = "53--62",
	month = aug,
	year = 1984}

@inproceedings{DeutschSchiffman84,
	author = "L. P. Deutsch and A. M. Schiffman",
	title = "Efficient Implementation of the {Smalltalk-80} System",
	booktitle = "Conference Record of the Eleventh Symposium on Priciples
				of Programming Language",
	pages = "297--301",
	month = jan,
	year = 1984}

@article{Schwartz75,
	author = "J. T. Schwartz",
	title = "Automatic Data Structure Choice in a Language of Very High Level",
	journal = "CACM",
	volume = "18:12",
	pages = "722--728",
	month = dec,
	year = 1975}

@article{Myers81,
	author = "E. W. Myers",
	title = "A Precise Inter-procedural Data Flow Algorithm",
	journal = "Conference Record of the Eighth ACM Symposium on Principles of
			 Programming Language",
	pages = "219--230",
	month = jan,
	year = 1981}

@article{CooperEtal86,
	author = "K. Cooper and K. Kennedy and L. Torczon",
	title = "The Impact of Interprocedural Analysis and Optimization in the
			{${\bf R}^n$} Programming Environment",
	journal = "ACM Transactions on Programming Languages and Systems",
	pages = "491--523",
	month = oct,
	year = 1986}

@inproceedings{CallahanEtal86,
	author = "D. Callahan and K. D. Cooper and K. Kennedy and L. Torczon",
	title = "Interprocedural Constant Propagation",
	booktitle = "{ACM SIGPLAN} '86 Symposium on Compiler Construction",
	pages = "152--161",
	month = jun,
	year = 1986}

@inproceedings{CooperKennedy84,
	author = "K. Cooper and K. Kennedy",
	title = "Efficient Computation of Flow Insensitive Interprocedural 
			Summary Information",
	booktitle = "{ACM SIGPLAN} '84 Symposium on Compiler Construction",
	pages = "247--258",
	month = jun,
	year = 1984}


@InProceedings{CooperKennedy88,
  author = 	 "Keith D. Cooper and Ken Kennedy",
  title = 	 "Interprocedural side-effect analysis in linear time",
  booktitle = PLDI88,
  pages = 	 "57--66",
  year = 	 1988,
  address = 	 PLDI88addr,
  month = 	 PLDI88date,
}

@inproceedings{CallahanKennedy87,
	author = "D. Callahan and K. Kennedy",
	title = "Analysis of Interprocedural Side Effects in a Parallel
			Environment",
	booktitle = "Proceedings of the First International Conference on 
		Supercomputing",
	note = "Also available as Technical Report 87-57, Department of Computer
		Science, Rice University",
	year = 1987}

@article{RepsEtal83,
	author = "T. Reps and T. Teitelbaum and A. Demers",
	title = "Incremental Context-Dependent Analysis for Language-based 
		Editors",
	journal = "ACM Transactions on Programming Language and Systems",
	pages = "449--477",
	month = jul,
	year = 1983}

@inproceedings{Zadeck84,
	author = "K. Zadeck",
	title = "Incremental Data Flow Analysis in a Program Editor",
	booktitle = "{ACM SIGPLAN} '84 Symposium on Compiler Construction",
	pages = "132--143",
	month = jan,
	year = 1984}

@inproceedings{Ryder83,
	author = "B. Ryder",
	title = "Incremental Data Flow Analysis",
	booktitle = "Conference Record of the Tenth ACM Symposium on Principles
				of Programming Languages",
	pages = "167--176",
	month = jan,
	year = 1983}

@article{RyderPaull88,
	author = "B. G. Ryder and M. C. Paull",
	title = "Incremental Data Flow Analysis Algorithms",
	journal = "{ACM} Transactions on Programming Languages and Systems",
	volume = 10,
	number = 1,
	pages = "1--50",
	month = jan,
	year = 1988}

@inproceedings{PollockSoffa85,
	author = "L. Pollock and M. L. Soffa",
	title = "Incremental Compilation of Locally Optimized Code",
	booktitle = "Conference Record of the Twelfth ACM Symposium on Principles
				of Programming Languages",
	pages = "152--164",
	month = jan,
	year = 1985}





@inproceedings{LiChen90,
	author = "J. Li and M. Chen",
	title = "Synthesis of Explicit Communication from Shared-Memory Program
		References",
	booktitle = "Proc. of the 3rd Workshop on Programming Languages and 
		Compilers for Parallel Computing",
	month = aug,
	year = 1990,
	address = "Irvine, CA"
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sugih Jamin <jamin(at)aludra.usc.edu>










%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Michael Scott <scott(at)cs.rochester.edu>
%%%

% Thanks to Cesar Quiroz for providing many of the citations.

% General Compiler Books








% Simple Optimizations



% Miscellaneous


















% Code Generation








% Low-Level and Peephole Optimizations









% Compiler Kits







% Data Flow Analysis






































% Interprocedural Optimization
























% Register Allocation











% Alias Detection






% Vectorization and Parallelization






















































% Program Transformations








% Debugging and Optimization





% RISC Compilers









% VLIW Compilers








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% "Steve" Stevenson <steve(at)hubcap.clemson.edu>
%%%


%Z Lori Pollock <lori(at)rice.edu>
%Z Here is a list of references from which I worked
%Z in my advanced compiler course.
%Z The course covered optimization, data flow analysis,
%Z code generation, register allocation, attribute
%Z grammars, and incremental evaluation.

%Z lethin(at)ai.mit.edu
%Z Andrew Ingalls <aingalls(at)sunfun.eta.com>
%Z ingalls.VAST Vectorizer
%Z ingalls.   Vectorization of non-recursive/non-data dependent loops
%Z ingalls.   Vectorization of both infinite (IF-THEN-GOTO loops) and DO/
%Z ingalls.    WHERE loop structures.
%Z ingalls.   Routine Expandsion
%Z ingalls.   Multiple Loop Collapse
%Z ingalls.   Picture Frame Collapse of Multiply Nested Loop structures
%Z ingalls.    (As many as 7 deep)
%Z ingalls.   The ability to REORDER/REDIMENSION arrays to increase
%Z ingalls.    'vectorizability'
%Z ingalls.   The ability (for the user) to SELECT which loop will be
%Z ingalls.    vectorized (so long as dependencies/recursions do not
%Z ingalls.    occur)


%A A. V. Aho
%A S. C. Johnson
%A J. D. Ullman
%T Code Generation for Machines with Multiregister Operations
%B 4th ACN Symposium of Principles of Programming Languages
%P 21-28

%A A. V. Aho
%A S. C. Johnson
%A J. D. Ullman
%T Code Generation for Expressions with Common Subexpressions
%J JACM
%V 24
%N 1
%P 146-160

%A A. V. Aho
%A J. D. Ullman
%T The Theory of Parsing, Translation, and Compiling, Vol 2: Compiling
%I Prentice-Hall
%D 1973

%A A. V. Aho
%A J. D. Ullman
%T Listings for Reducible Flow Graphs
%B 7th ACM Symposium on Theory of Computing
%D 1975
%P 177-185

%A A. V. Aho
%A Ravi Sethi
%A J. D. Ullman
%T Compilers: Principles, Techniques and Tools
%I Addison-Wesley
%D 1985

%A F. E. Allen
%T Control Flow Analysis
%J SIGPLAN Notices
%V 5
%N 7
%P 1-19
%D 1970

%A F. E. Allen
%A J. Cocke
%T A Catalogue of Optimizing Transformations
%B Design and Optimization of Compilers
%E R. Rustin
%I Prentice-Hall
%D 1971
%P 1-30.
%O Transformations

%A F. E. Allen
%T Interprocedural Data Flow Analysis
%J Proceedins of IFIP Congress
%V 74
%I North-Holland
%P 398-402
%D 1974
%C Amsterdam

%A F. E. Allen
%A J. Cocke
%T A Program Data Flow Analysis Procedure
%J CACM
%V 19
%N 3
%D 1976
%P 137-147

%A F. E. Allen
%T Program Optimization
%J Annual Review of Automatic Programming
%V 5
%P 239-307
%D ??

%A J. R. Allen
%A K. Kennedy
%T PFC: A program to convert Fortran to parallel form
%R MASC-TR82-6
%I Rice University

%A J. R. Allen
%A K. Kennedy
%T Automatic Loop Interchange
%B Proc. of the ACM SIGPLAN Symposium on Compiler Construction
%C Montreal
%D 1984
%P 233-246

%A J. R. Allen
%A K. Kennedy
%T Automatic Translation of Fortran Programs to Vector Form
%Z Rice COMP TR84-9 July 1984
%J Transactions on Programming Languages and Systems
%D October 1987
%O Parallelization

%T Automatic Decomposition of Scientific Programs for Parallel Execution
%A R. Allen
%A D. Callahan
%A K. Kennedy
%B Conference Record of the Fourteenth
%D Jan 1987
%P 63-76.
%O Parallelization

%A B. Alpern
%A M. Wegman
%A F. Zadeck,
%T Detecting equality of variables in programs
%B Fifteenth POPL
%D January 1988
%O Data Flow Analysis

%A Lee Badger
%A Mark Weiser
%T Minimizing Communication for Synchronizing Parallel Dataflow Programs
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 122-126
%K Compilers, MIMD, splitting, slicing, hammock graph, correctness proof,
%X Misprint of pages (out of sequence in my copy).

%A J. Ball
%T Predicting the effects of optimization on a procedure body
%B SIGPLAN Compiler Construction Conference
%D August 1979
%O Interprocedural optimization

%A U. Banerjee
%T Speedup of Ordinary Programs
%R 79-989
%I Cornell University
%D 1979

%A U. Banerjee
%A S. C. Chen
%A D. J Kuck
%A R. A. Towle
%T Time and Parallel Processor Bounds for  Fortran-like Loops
%J IEEE Trans Comput
%V C-28
%N 9
%D 1979
%P 660-670

%A U. Banerjee
%T Direct Parallelization of Call Statements
%R Rept 576
%I Center for Supercomputer Research and Development
%D 1985

%A J. C. Beatty
%T REgister Assignment Algorithm for Generaton of Highly Optimized Object Code
%J IBM J. Res. Devel
%P 20-39

%A J. C. Beatty
%T A Global Register Assigment Algorithm
%B Design and Optimization of Compilers
%E R. Rustin
%I Prentice-Hall
%D 1972
%P 65-68

%A L. A. Belady
%T A Study of Replacement Algorithms for a Virtual Storage Computer
%I IBM
%J IBM Systems Journal
%V 5
%N 2
%D 1966
%P 78-101

%A J. Bruno
%A R. Sethi
%T Code Generation for a One-Register Machine
%J JACM
%V 23
%N 3
%P 502-510

%A M. Burke
%A R. Cytron
%T Interprocedural dependaence analysis and parallelization
%B SIGPLAN 1986 Symposium on Compiler Construction
%D 1986
%P 162-175
%O Interprocedural Analysis

%A V. A. Busam
%A D. E. Englund
%T Optimization of expresions in Fortran
%J CACM
%V 12
%N 12
%D 1969
%P 666-674

%A D. Callahan
%A K. D. Cooper,
%A K. Kennedy
%A L. Torczon
%T Interprocedural Constant Propagation
%B ACM SIGPLAN 86 Symposium on Compiler Construction
%D June 1986
%P 152-161
%O Interprocedural optimization

%A D. Callahan
%A K. Kennedy,
%T Analysis of Interprocedural Side Effects in a Parallel Programming
%B Proceedings of the First International Conference on Supercomputing
%D 1987
%Z Rice University TR 87-57
%O Interprocedural Analysis

%A D. Callahan
%T The program summary graph and flow-sensitive interprocedural data flow
%B SIGPLAN Conf. on Prog. Lang. Design and Imple.
%D June 1988.
%O Interprocedural Analysis

%A F. Chow
%A M. Himelstein
%A E. Killian
%A L. Weber
%D 1986
%B Proc. of Compcon 1986
%P 132-137
%T Engineering a RISC Compiler System

%A F. Chow
%A M. Himelstein
%A E. Killian
%A L. Weber
%T Engineering a RISC compiler system
%B Digest of Papers of the Thirtyfirst IEEE Computer Society International Conference
%I IEEE
%D Feb 1986
%P 132-137.
%O

%A F. Chow
%A M. Himelstein
%A E. Killian
%A L. Weber
%T Engineering a RISC compiler system
%J Digest of Papers of the Thirtyfirst IEEE Computer Society International
%D February 1986
%P 132-137.

%T Minimizing register usage penalty at procedure calls
%A F. Chow
%B SIGPLAN Conf. on Prog. Lang. Design and Imple.
%D June 1988
%O Register Allocation

%A J. Cocke
%A K. Kennedy
%T An Algorithm for Reduction of Operator Strength
%J CACM
%V 20
%N 11
%P 850-856

%A J. Cocke
%T Global Common Subexpression Elimination
%J SIGPLAN Notices
%V 5
%N 7
%D 1970
%P 20-24

%A J. Cocke
%A J. T. Schwartz
%T Programming Languages and Their Compilers
%I Courant Institute of Mathematical Sciences
%D 1970

%A Robert P. Colwell
%A Robert P. Nix
%A John J. O'Donnel
%A David B. Papworth
%A Paul K Rodman
%J IEEE Transactions on Computers
%T A VLIW Architecture for a Trace Scheduling Compiler
%D Aug, 1988
%J 37
%N 8
%P 967-979

%A K. Cooper
%A K. Kennedy
%T Efficient Computation of Flow Insensitive Interprocedural
%B ACM SIGPLAN 84 Symposium on Compiler Construction
%D June 1984
%P 247-258
%O Interprocedural Analysis

%A K. Cooper
%O Aliases
%T Analyzing aliases of references formal parameters
%B Twelfth POPL
%D January 1985
%O Interprocedural optimization

%T The Impact of Interprocedural Analysis and Optimization
%A K. Cooper
%A K. Kennedy
%A L. Torczon
%B ACM Transactions on Programming Languages and Systems
%D October 1986
%P 491-523
%O Incremental Compilation/Optimization in Programming Environments

%A K. Cooper
%A K. Kennedy
%T Interprocedural side-effect analysis in linear time
%B SIGPLAN Conf. on Prog. Lang. Design and Imple.
%D June 1988.
%O Interprocedural Analysis

%A D. S. Coutant
%A C. L. Hammond
%A J. W. Kelley
%T Compilers for the New Generation of Hewlett-Packard Computers
%D 1986
%J Hewlett-Packard Journal
%P 4-18

%A R. Cytron
%A M. Burke
%T ??

%A R. Cytron
%A A. Lowry
%A K. Zadeck
%T Code motion of control structures in high-level languages
%B Thirteenth POPL
%D January 1986.
%O Data Flow Analysis

%A R. Cytron
%T ??
%I ??
%D ??
%O automatic parallelization

%T A retargetable instruction reoranizer
%A J. Davidson
%B SIGPLAN Compiler Construction Conf.
%D June 1986
%O Low Level and Peephole Optimizations

%A Henry G. Dietz
%Z Purdue
%T Finding Large-Grain Parallelism In Loops With Serial Control Dependencies
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 114-121
%K Compilers, control precomputation, transformation, closure loop,
%X Paper should have summarized comparison to DOALL and FORALL loops.

%A Rice Faculty
%T ?
%J TOPLAS
%D Dec, 1986
%O Function/interprocedural optimizations

%T The Program Dependence Graph and its Use in Optimization
%A J. Ferrante
%A K. J. Ottenstein
%A J. D. Warren
%J ACM Transactions on Programming Languages and Systems
%D July 1987
%P 319-349
%O Parallelization

%T Trace Scheduling: A Technique for Global Microcode Compaction
%A J. Fisher
%J IEEE Transactions on Computers
%V C-30
%N 7
%D July 1981
%P 478-490
%O Low Level and Peephole Optimizations

%T Integrating code generation and optimization
%A C. Fraser
%A A. Wendt
%B SIGPLAN Compiler Construction Conf.
%D June 1986
%O Low Level and Peephole Optimizations

%T Automatic generation of fast optimizing code generators
%A C. Frazer
%A A. Wendt
%B SIGPLAN Conf. on Prog. Lang. Design and Implementaion
%D June 1988
%O Low Level and Peephole Optimizations

%T A Systematic Approach to Advanced Debugging through Incremental Compilation
%A P. Fritzson
%B ACM SIGSOFT/SIGPLAN Software Engineering Symposium on High-Level
%D March 1983
%P 130-139
%O Incremental Compilation/Optimization in Programming Environments

%T Efficient Instruction Scheduling for a Pipelined Architecture
%A P. B. Gibbons
%A S. S. Muchnick
%B ACM SIGPLAN 86 Symposium on Compiler Construction
%D June 1986
%P 11-16
%O Low Level and Peephole Optimizations

%A S. L. Graham
%A M. Wegman
%T A Fast and Usually Linear Algorithm for Global Flow Analysis
%B 2nd ACM Symposium on Principls of Programming Languages
%D 1975
%P 22-34
%A Samuel P. Harbison
%T A Computer Architecture for the Dynamic Optimization of High-Level
%R CMU-CS-80-143
%I Computer Science Dept., Carnegie-Mellon University
%D September 1980
%O

%A David Gries
%T Compiler Construction for Digital Computers
%I John Wiley
%D 1971

%A L. Grob
%T ??
%O Parallelism detection

%A W. Harrison
%T Compiler analysis of the value ranges for variables
%J IEEE Transactions on Software Engineering
%V SE-3
%N  3
%D May 1977
%O Data Flow Analysis

%A W. L. Harrison
%T Compiling LISP for Evaluation on a Tightly Coupled Multiprocessor
%I Center for Supercomputing Res. & Dev., Univ. of Ill. at U-C
%R Rpt. No. 565
%D Mar., 1986
%O Mr. Harrison's PhD Thesis, which will cover the same area as the following,

%A M. S. Hecht
%A J. D. Ullman
%T Flow Graph Reducibility
%J SIAM J. Comput
%V 1
%N 2
%P 188-202

%A M. S. Hecht
%T Flow Analyusis of Computer Programs,
%I Elsevier
%C Amsterdam
%D 1977

%T Program optimization and exception handling
%A J. Hennessy
%J ??

%T Symbolic Debugging of Optimized Code
%A J. Hennessy
%J ACM Transactions on Programming Languages and Systems
%V 4
%N 3
%D July 1982
%P 323-344
%O Symbolic Debugging and Optimization

%T Postpass Code Optimization of Pipeline Constraints
%A J. Hennessy
%A T. Gross
%J ACM Transactions on Programming Languages and Systems
%D July 1983
%P 422-448
%O Low Level and Peephole Optimizations

%A J. E. Hopcroft
%A J. D. Ullman
%T An nlogn algorithm to dectect reducible graphs
%B Proc.6th Annyal Princeton Conf on Informaiton Sciences and Systems
%P 119-122

%A Harlan E Husmann
%A David J. Kuck
%A David A. Padua
%Z CSRD, U. Ill.
%T Automatic Compound Function Definition for Multiprocessors
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 33-41
%K Compilers, program graph, compound functions (CF), control functions (CTF),

%A Christopher Alan Huson
%T An In-Line Subroutine Expander for Parafrase
%I Univ. of Illinois at Urbana-Champaign, Dept. of Computer Sci.
%R Rpt. No. 82-1118
%D Dec., 1982

%A J. B. Kam
%A J. D. Ullman
%T Monotone Data Flow Analysis Frameworks
%J Acta Informatica
%V 7
%D 1977
%P 305-317
%O Data Flow Analysis

%A K. Kennedy
%T A Global Flow Analysis Algorithm
%J International J. Comp Math
%V 3
%N 1
%P 5-16

%A K. Kennedy
%T Node Listings Applied to Data Flow Analysis
%B 2nd ACM Symposium on Principles of Programming Languages
%D 1975
%P 10-21

%A D. E. Knuth
%T An empirical study of FORTRAN programs
%J Software - Practice and Experience
%V 1
%N 12
%D  1971.
%P 105-134
%O Motivation for optimization

%A D. J. Kuck
%A et al.
%T Dependence Graphs and Compiler Optimization
%B Conference Record of the Eighth ACM Symposium on Principles of
%D Jan. 1981
%P 207-218
%O Parallelization

%T Register Allocation in the SPUR Lisp Compiler
%A J. R. Larus
%A R. N. Hilfinger
%B ACM SIGPLAN 86 Symposium on Compiler Construction
%D June 1986
%P 255-263.
%O Register Allocation

%A Gyungho Lee
%Z U. of SW Louisiana
%T Automatic Restructuring of Conditional Cyclic Loops
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 42-45
%K Compilers, shared memory machines, CREW PRAM, postfix-IF,

%T A Guidebook to Fortran on Supercomputers
%A John M. Levesque
%A Joel W. Williamson
%C NY
%I Academic Press
%D 1988

%A Zhiyuan Li
%A Pen-Chung Yew
%T Interprocedural Analysis and Program Restructuring for Parallel Programs
%I Univ. of Illinois at Urbana-Champaign, Center for Supercomputing Res. & Dev.
%R CSRD Report No. 720

%A Zhiyuan Li
%A Pen-Chung Yew
%T Interprocedural Analysis for Parallel Programs
%J To appear in Proc. of 1988 Int'l. Conf. on Parallel Processing, St. Charles, IL
%D August 1988

%A J. Lipkis
%A L. Grob
%T ??
%O Survey

%A D. B. Loveman
%T Program Improvement by Source-to-Source Transformation
%J JACM
%V 20
%N 1
%D Jan. 1977
%P 121-145
%O Transformations

%A E. Lowry
%A C. W. Medlock
%T Object Code Optimizaiton
%J CACM
%V 12
%N 1
%D 1971
%P 13-22

%A W. J. Meyer
%T Optimization of Computer Code
%I G. E. Research Center
%C Schenectady, NY
%R Unpublished
%P 12

%A E. Morel
%A C. Renvoise
%T Global optimization by suppression of partial redundancies
%J CACM
%V 22
%N 2
%D Feb. 1979.
%O Data Flow Analysis

%A E. W. Myers
%T A Precise Inter-procedural Data Flow Algorithm
%B Conference Record of the Eighth ACM Symposium on Principles of Programming Languages
%D Jan. 1981
%P 219-230
%O Interprocedural Analysis

%A Ikuo Nakata
%T On Compiling Algorithms fro Arithmetic Expressions
%J CACM
%V 10
%N 8
%P 492-494

%A K. J. Ottenstein
%T A Brief Survey of Implicit Parallelism Detection
%B Parallel MIMD Computation: HEP Supercomputer and Its Applications
%E Janusz Kowalik
%I MIT Press
%D 1985
%P 93-122
%O Parallelization

%A D. Padua
%A M. J. Wolfe
%T Advanced Compiler Optimizations for Supercomputers
%J CACM
%V 29
%N 12
%D Dec 1986
%P 1184-1201

%T Incremental Compilation of Locally Optimized Code
%A L. Pollock
%A M. L. Soffa
%B \fIConference Record of the Twelfth ACM Symposium on Principles
%D Jan. 1985
%P 152-164
%O Incremental Compilation/Optimization in Programming Environments

%A B. Rosen
%A M. Wegman
%A F, Zadeck
%T Global value numbers and redundant computations
%B Fifteenth POPL
%D January 1988.
%O Data Flow Analysis

%T Incremental Data Flow Analysis
%A B. Ryder
%B Conference Record of the Tenth ACM Symposium on Principles of Programming 
%D Jan. 1983
%P 167-176
%O Incremental Compilation/Optimization in Programming Environments

%A M. Schaefer
%T A Mathyematical Theory of Global Program Optimization
%I Prentice-Hall
%D 1973?
%X

%A R. Scheifler
%T An analysis of inline substitution for a structured programming language
%JCACM
%V 20
%N 9
%D Sept. 1977.
%O Interprocedural optimization

%A E. Schonberg
%T ??
%J SIGPLAN Notices
%D 1989?

%A Ravi Sethi
%A J. D. Ullman
%T The Generation of Optimal Code for Arithmetic Expressions
%J JACM
%V 17
%N 4
%P 715-728

%A Weijia Shang
%A Jose A. B. Fortes
%Z Purdue
%T On The Independent Partitioning of Algorithms With Uniform Data
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 26-33
%K Compilers, index set, dependence vectors,

%A S. Sobek
%A M. Azam
%A J. C. Browne
%Z U. Texas
%T Architectural and Language Independent Parallel Programming: A
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 80-83
%K Languages, Ada C, Fortran, Sequent Balance, VAX cluster, iPSC

%A P. David Stotts
%Z U. Maryland
%T The PFG Language: Visual Programming for Concurrent Computation
%J Proceedings of the 1988 International Conference on Parallel Processing
%V II, Software
%I Penn State
%C University Park, Penn
%D August 1988
%P 72-79
%K Languages, parallel flow graphs, timed Petri nets, free-choice class,

%A H. R. A. Strong
%A A. Maggiolo-Schettini
%A B. A. Rosen
%T Recusion Structure Simplification
%J SIAM J. Comput
%V 4
%N 3
%D 1975
%P 307-320

%A R. E. Tarjan
%T A Unified Approach to Path Problems
%J JACM
%V 28
%N 3
%D July 1981
%P 577-593
%O Data Flow Analysis

%A Jean-Paul Tremblay
%A Paul G. Sorenson
%T The Theory and Practice of Compiler Writing
%I McGraw-Hill Inc.
%D 1984

%T Direct Parallelization of Call Statements
%A R. Triolet
%A F. Irigoin
%A P. Feautrier
%B ACM SIGPLAN 1986 Symposium on Compiler Construction
%D June 1986, 
%P 176-185
%O Parallelization

%A R. Triolet
%A F. Irigoin
%A P. Feautrier
%T Direct Parallelization of Call Statements
%J Proc. of the SIGPLAN 86 Symp. on Compiler Construction, SIGPLAN No. 21
%P 176-185
%D July, 1986

%A Remi Triolet
%A Paul Feautrier
%A Francois Irigoin
%T Automatic Parallelizations of Fortran Programs in the Presence of Procedure Calls
%J To appear: European Symposium on Programming Languages
%D 1986

%A Remi Triolet
%T Interprocedural Analysis for Program Restructuring with Parafrase
%I Univ. of Illinois at Urbana-Champaign, Center for Supercomputing Res. & Dev.
%R CSRD Rpt. No. 538
%D Aug., 1986

%A J. D. Ullman
%T Fast Algorithms for the Elination of Common Subexpressions
%J Acta Informatica
%V 2
%N 3
%D 1973
%P 191-213

%T Global register allocation at link time
%A D. Wall
%B SIGPLAN Compiler Construction Conf
%D June 1986.
%O Register Allocation

%A M. Wegman
%A K. Zadeck,
%T Constant Propagation with Conditional Branches
%B Conference Record of the Twelfth ACM Syposium on Principles of Programming Languages
%D Jan. 1985
%P 291-299
%O Data Flow Analysis

%T Data Dependence
%A M. J. Wolfe
%R Optimizing Supercompilers for Supercomputers
%X Ph. D. Dissertation
%D October 1982
%P 11-57
%O Parallelization

%T Structure of a Supercomplier
%A M. J. Wolfe
%R Optimizing Supercompilers for Supercomputers
%X Ph. D. Dissertation
%D October 1982
%P 214-218
%O Parallelization

%A W. A. Wulf
%A A. Russell
%A A. N. Habermann
%T BLISS: A Language for Systems Programming
%J CACM
%V 14
%N 12
%P 780-790

%A W. A. Wulf
%A R. K. Johnson
%A C. B. Weinstock
%A S. O. Hobbs
%A C. M. Geschke
%T The Design of an Optimizing Compiler
%C NY
%I Elsevier North-Holland
%D 1975

%T Incremental Data Flow Analysis in a Structured Program Editor
%A K. Zadeck
%B ACM SIGPLAN 84 Symposium on Compiler Construction
%D June 1984
%P 132-143
%O Incremental Compilation/Optimization in Programming Environments

%T An Interactive High-Level Debugger for Control-Flow Optimized Programs
%A P. T. Zellweger
%B ACM SIGSOFT/SIGPLAN Software EngineeringSymposium on High-Level Debugging
%D March 1983
%P 159-171


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% FUSE
%%%


@TechReport{Weise90,
  author = 	 "Daniel Weise",
  title = 	 "Graphs as an intermediate representation for partial evaluation",
  institution =  "Stanford Computer Systems Laboratory",
  year = 	 1990,
  number =	 "CSL-TR-90-421",
  address =	 "Stanford, CA",
  month =	 Mar
}












@InProceedings{WeiseCRS91,
  author = 	 "Daniel Weise and Roland Conybeare and Erik Ruf and Scott Seligman",
  title = 	 "Automatic online partial evaluation",
  editor =	 "J. Hughes",
  number =	 523,
  series =	 lncs,
  pages =	 "165--191",
  booktitle =	 FPLCA,
  year =	 1991,
  organization = "ACM",
  publisher =	 "Springer-Verlag",
  address =	 "Cambridge, MA",
  month =	 Aug # "~26--30,"
}



















%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fortran interprocedural analysis
%%%

% From: cliffc(at)cs.rice.edu (Cliff Click)
% Date: Thu, 15 Apr 1993 17:24:33 -0500 (CDT)
% 
% I not an expert on fortran interprocedural analysis, nor on fortran call
% graph building (several older papers on both are required reading, but
% their not my focus).  I can give you a scattering of papers, but you could
% also talk to Rene Rodriguez (rene(at)cs.rice.edu, research on getting info
% better than 0CFA and cheaper than nCFA) and Mary Hall
% (mhall(at)cs.stanford.edu, expert on fortran call graph analysis).
% 
% Cliff



@unpublished{Hall:Call,
author={Mary W. Hall and Ken Kennedy}, title={Efficient Call Graph Analysis},
year=1992,month=Jun,note={submitted to LOPLAS}
}

@InProceedings{Myers:precise,
Author={Eugene W. Myers}, Title={A precise inter-procedural data flow
algorithm}, Booktitle=POPL81,
Year=1981}

@InProceedings{CCKT:Constants,
	Author={D. Callahan and K.D. Cooper and Ken Kennedy and L. Torczon},
	Title={Interprocedural Constant Propagation},
	BookTitle=CC86,
	Month=Jul,
	Year={1986}
}

@InProceedings{CKTo:Interprocedural,
	Author={K.D. Cooper and  Ken Kennedy and L. Torczon},
	Title={The Impact of Interprocedural Analysis and Optimization
		in the {Rn} Programming Environment},
	BookTitle={{ACM} Transactions on Programming Languages and Systems},
	Pages={491--523},	Month=Oct,
	Year=1986}

@InProceedings{CoKe:Efficient,
	Author={ K. Cooper  and  Ken Kennedy },
	Title={Efficient Computation of Flow Insensitive Interprocedural
		Summary Information},
	BookTitle=CC84,
	Month=Jul,
	Year={1985}
}


@InProceedings{Call:Program,
	Author={D. Callahan},
	Title={The Program Summary Graph and Flow-sensitive Interprocedural 
Data Flow Analysis},
	BookTitle=PLDI88,
	Address={Atlanta, GA},
	Month=jun,
	Year={1988}
}

@InCollection{CaKe:Analysis,
	Author={D. Callahan and Ken Kennedy},
	Title={Analysis of Interprocedural Side Effects in a
		Parallel Programming Environment},
	BookTitle={Proceedings of the First
		International Conference on Supercomputing},
	Publisher={Springer-Verlag},
	Address={Athens, Greece},
	Year={1987}
}

@Article{Ryde:Constructing,
Author={Barbara G. Ryder}, Title={Constructing the Call Graph of a Program},
Journal=TSE, Volume={SE-5}, Number={3}, Pages={216--226}, Month=May,
Year={1979}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Papers from MIT compiler reading group, spring 1992
%%%



@Article{ChaitinACCHM81,
  author = 	"Gregory J. Chaitin and Marc A. Auslander and Ashok K. Chandra
		 and John Cocke and Martin E. Hopkins and Peter W. Markstein",
  title = 	"Register Allocation via Coloring",
  journal = 	"Computer Languages",
  year = 	"1981",
  volume = 	"6",
  number = 	"1",
  pages = 	"47--57"
}

@InProceedings{Chaitin82,
  author = 	"G[regory] J. Chaitin",
  title = 	"Register Allocation and Spilling via Graph Coloring",
  booktitle = 	CC82,
  year = 	"1982",
  pages = 	"98--105",
  month = 	jun,
  note = 	"SIGPLAN Notices Volume 17, Number 6"
}



@Article{ChowH90,
  author = 	"Fred C. Chow and John L. Hennessy",
  title = 	"The priority-based coloring approach to register allocation",
  journal = 	toplas,
  year = 	"1990",
  volume = 	"12",
  number = 	"4",
  pages = 	"501--536",
  month = 	oct
}

@InProceedings{Chow88,
  author = 	"Fred C. Chow",
  title = 	"Minimizing Register Usage Penalty at Procedure Calls",
  booktitle = 	PLDI88,
  year = 	"1988",
  pages = 	"85--94",
  month = 	jun
}

@InProceedings{Wall88,
  author = 	"David W. Wall",
  title = 	"Register windows vs. register allocation",
  booktitle = 	PLDI88 # ",~Volume {II}",
  year = 	"1988",
  pages = 	"67--78",
  month = 	jun,
  OPTnote = 	""
}



@Article{WegmanZ91,
  author = 	"Mark N. Wegman and F. Kenneth Zadeck",
  title = 	"Constant Propagation with Conditional Branches",
  journal = 	toplas,
  year = 	"1991",
  volume = 	"13",
  number = 	"2",
  pages = 	"181--210",
  month = 	apr
}

@Article{CytronFRWZ91,
  author = 	"Ron Cytron and Jeanne Ferrante and Barry K. Rosen and
                 Mark N. Wegman and F. Kenneth Zadeck",
  title = 	"Efficiently Computing Static Single Assignment Form and
		 the Control Dependence Graph",
  journal = 	toplas,
  year = 	"1991",
  volume = 	"13",
  number = 	"4",
  pages = 	"451--490",
  month = 	oct
}



@Article{SchwartzS78,
  author = 	"J. T. Schwartz and M. Sharir",
  title = 	"Tarjan's Fast Interval Finding Algorithm",
  journal = 	"{SETL} Newsletter",
  year = 	"1978",
  volume = 	"204",
  month = 	mar # "~3,"
}

@Article{Sharir80,
  author = 	"M. Sharir",
  title = 	"Structural Analysis: a New Approach to Flow Analysis in
		 Optimizing Compilers",
  journal = 	"Computer Languages",
  year = 	"1980",
  volume = 	"5",
  number = 	"3/4",
  pages = 	"141--153"
}



@Article{HennessyG83,
  author = 	"John Hennessy and Thomas Gross",
  title = 	"Postpass Code Optimization of Pipeline Constraints",
  journal = 	toplas,
  year = 	"1983",
  volume = 	"5",
  number = 	"3",
  pages = 	"422--448",
  month = 	jul
}

@InProceedings{GibbonsM86,
  author = 	"Phillip B. Gibbons and Steven S. Muchnick",
  title = 	"Efficient Instruction Scheduling for a Pipelined Architecture",
  booktitle = 	CC86,
  year = 	"1986",
  pages = 	"11--16",
  month = 	jun
}



@Article{Fisher81,
  author = 	"Joseph A. Fisher",
  title = 	"Trace Scheduling: A Technique for Global Microcode Compaction",
  journal = 	ieeetc,
  year = 	"1981",
  volume = 	"C-30",
  number = 	"7",
  pages = 	"478--490",
  month = 	jul
}

@InProceedings{Lam88,
  author = 	"Monica Lam",
  title = 	"Software Pipelining: An Effective Scheduling Technique for
		 VLIW Machines",
  booktitle = 	PLDI88,
  year = 	"1988",
  pages = 	"318--328",
  month = 	jun
}

@Article{FisherR91,
  author = 	"Joseph A. Fisher and B. Ramakrishna Rau",
  title = 	"Instruction-level parallel processing",
  journal = 	"Science",
  year = 	"1991",
  volume = 	"253",
  pages = 	"1233--1241",
  month = 	sep # "~13,"
}



@Article{SethiU70,
  author = 	"Ravi Sethi and J. D. Ullman",
  title = 	"The Generation of Optimal Code for Arithmetic Expressions",
  journal = 	jacm,
  year = 	"1970",
  volume = 	"17",
  number = 	"4",
  pages = 	"715--728",
  month = 	oct
}

@Article{LeverettCHNRSW80,
  author = 	"Bruce W. Leverett and Roderic G. G. Cattell and Steven O. Hobbs
		 Joseph M. Newcomer and Andrew H. Reiner and Bruce R. Schatz and
		 William A. Wulf",
  title = 	"An Overview of the Production-Quality Compiler-Compiler Project",
  journal = 	"IEEE Computer",
  year = 	"1980",
  volume = 	"13",
  number = 	"8",
  pages = 	"38--49",
  month = 	aug
}

@InProceedings{Davidson86,
  author = 	"Jack W. Davidson",
  title = 	"A Retargetable Instruction Reorganizer",
  booktitle = 	CC86,
  year = 	"1986",
  pages = 	"234--241",
  month = 	jun
}



@InProceedings{GlanvilleG78,
  author = 	"R. Steven Glanville and Susan L. Graham",
  title = 	"A New Method for Compiler Code Generation",
  booktitle = 	POPL78,
  year = 	"1978",
  pages = 	"231--240",
  month = 	jan
}

@Article{Horspool,
  author = 	"R. Nigel Horspool",
  title = 	"An Alternative to the Graham-Glanville Code-Generation Method",
  journal = 	"IEEE Software",
  year = 	"1987",
  volume = 	"4",
  number = 	"3",
  pages = 	"33--39",
  month = 	may
}

@InProceedings{AigrainGHMP84,
  author = 	"Philippe Aigrain and Susan L. Graham and Robert R. Henry
		 and Marshall Kirk McKusick and Eduardo Pelegr\'\i-Llopart",
  title = 	"Experience with a {Graham}-{Glanville} Style Code Generator",
  booktitle = 	CC84,
  year = 	1984,
  pages = 	"13--24",
  month = 	jun,
  note =        "SIGPLAN Notices Vol.~19, No.~6"
}

@InProceedings{ChristoperHK84,
  author = 	"Thomas W. Christopher and Philip J. Hatcher and Ronald C.
		 Kukik",
  title = 	"Using dynamic programming to generate optimized code in a
		 {Graham}-{Glanville} sytle code generator",
  booktitle = 	CC84,
  year = 	1984,
  pages = 	"25--36",
  month = 	jun,
  note =        "SIGPLAN Notices Vol.~19, No.~6"
}




@InProceedings{Cooper85,
  author = 	"Keith D. Cooper",
  title = 	"Analyzing Aliases of Reference Formal Parameters",
  booktitle = 	POPL85,
  year = 	"1985",
  pages = 	"281--290",
  month = 	jan
}

@InProceedings{HorwitzPR89:PLDI,
  author = 	"Susan Horwitz and Phil Pfeiffer and Thomas Reps",
  title = 	"Dependence Analysis for Pointer Variables",
  booktitle = 	PLDI89,
  year = 	"1989",
  pages = 	"28--40",
  month = 	jun
}



@InProceedings{RuggieriM88,
  author = 	"Christina Ruggieri and Thomas P. Murtaugh",
  title = 	"Lifetime analysis of dynamically allocated objects",
  booktitle = 	POPL88,
  year = 	"1988",
  pages = 	"285--293",
  address = 	"San Diego, California",
  month = 	jan
}
























%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Not included (due to lack of time)
%%%




@inproceedings{Zellweger83,
	author = "Polle T. Zellweger",
	title = "An Interactive High-Level Debugging for Control-Flow
		Optimized Programs",
	booktitle = HLD,
	pages = "159--171",
	month = mar,
	year = 1983}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Miscellaneous
%%%



@InProceedings{vonDincklageD2009,
  author = 	 "von Dincklage, Daniel and Diwan, Amer",
  title = 	 "Optimizing programs with intended semantics",
  booktitle = OOPSLA2009,
  pages = 	 "409--424",
  year = 	 2009,
  address = 	 OOPSLA2009addr,
  month = 	 OOPSLA2009date,
  abstract =
   "Modern object-oriented languages have complex features that cause
    programmers to overspecify their programs. This overspecification hinders
    automatic optimizers, since they must preserve the overspecified
    semantics. If an optimizer knew which semantics the programmer intended, it
    could do a better job.
    \par
    Making a programmer clarify his intentions by placing assumptions into the
    program is rarely practical. This is because the programmer does not know
    which parts of the programs' overspecified semantics hinder the
    optimizer. Therefore, the programmer has to guess which assumption to
    add. Since the programmer can add many different assumptions to a large
    program, he will need to place many such assumptions before he guesses
    right and helps the optimizer.
    \par
    We present IOpt, a practical optimizer that uses a specification of the
    programmers' intended semantics to enable additional optimizations. That
    way, our optimizer can significantly improve the performance of a
    program. We present case studies in which we use IOpt to speed up two
    programs by a factor of 2.
    \par
    To make specifying the intended semantics practical, IOpt communicates with
    the programmer. IOpt identifies which assumptions the programmer
    \emph{should} place, and where he should place them. IOpt ranks each
    assumption by (i) the likelyhood that the assumption conforms to the
    programmers' intended semantics and (ii) how much the assumption will help
    IOpt improve the programs' performance. IOpt proposes ranked assumptions to
    the programmer, who just picks those that conform to his intended
    semantics.With this approach, IOpt keeps the programmers' specification
    burden low. In our case studies, programmers had to add just a few
    assumptions to realize significant performance speedups.",
}

@ARTICLE{       Jones:89:Mix,
  AUTHOR        = "N.D. Jones and P. Sestoft and H. S{\o}ndergaard",
  TITLE         = "Mix: A Self-Applicable Partial Evaluator for Experiments
  in Compiler Generation",
  JOURNAL       = "Lisp and Symbolic Computation",
  YEAR          = "1989",
  VOLUME        = "2",
  NUMBER        = "1",
  PAGES         = "9--50", 
  ANNOTE = "A comprehensive discussion of partial evaluation, its
applications to generation of compilers and compiler generators, and
of engineering problems is given.  A fully automatic version of the
partial evaluator discussed in \cite{Jones:85:AnExperiment} is
described and results from its use are reported."
}


@InProceedings{Consel:93:Tutorial,
  author = 	"C. Consel and O. Danvy",
  title = 	"Tutorial Notes on Partial Evaluation",
  booktitle = 	"Twentieth ACM Symposium on Principles of Programming
		 Languages, Charleston, South Carolina, January 1993",
  year = 	"1993",
  pages = 	"493--501",
}


@Book{Jones:93:PartialEvaluation,
  author = 	"N.D. Jones and C.K. Gomard and P. Sestoft",
  title = 	"Partial Evaluation and Automatic Program Generation",
  publisher = 	"Prentice Hall",
  year = 	"1993"
}


@article{Hoare2003,
 author = {Hoare, Tony},
 title = {The verifying compiler: A grand challenge for computing research},
 journal = JACM,
 volume = {50},
 issue = {1},
 month = jan,
 year = {2003},
 pages = {63--69},
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% End
%%%

