%%%
%%% Macros bibliography
%%%

@TechReport{ellemtel92,
  author = 	 {{Ellemtel Telecommunication Systems Laboratory}},
  title = 	 {Programming in {C++}: Rules and Recommendations},
  institution =  {Ellemtel Telecommunications},
  year = 	 1992,
  address =	 {Sweden}
}


@Manual{cpp-manual,
  title = 	 {{GNU} {C} Preprocessor Manual},
  author =	 {{GNU~P}roject},
  edition =	 {v2.7.2}
}


@Manual{GCC,
  title = 	 "Using and Porting {GNU} {CC}",
  author = 	 "Richard M. Stallman",
  organization = "Free Software Foundation",
  address = 	 "Boston, MA, USA",
  edition = 	 "2.7.2",
  year = 	 1996,
  month = 	 jun # "~29,",
}

@Manual{Stallman97,
  title = 	 {{GNU} Coding Standards},
  author =	 {Richard Stallman},
  organization = {{GNU} Project},
  year =	 1997,
  month =	 {July},
  note =	 {\relax{}\url{ftp://prep.ai.mit.edu/pub/gnu/standards/standards.texi}}
}


@Misc{Deutsch90,
  author =	 {Deutsch, Peter},
  title =	 {ansi2knr},
  howpublished = {Freely available software program},
  year =	 1990,
  month =	 {December},
  note =	 {\relax{}Included in the ghostscript distribution from Aladdin
		  Enterprises, ftp://ftp.cs.wisc.edu/ghost/}
}


@Manual{Cannon90,
  title = 	 {Recommended {C} Style and Coding Standards},
  author =	 {Cannon, L.W. and Elliott, R.A. and Kirchoff, L.W. and Miller, J.H. and Mitze, R.W. and Schan, E.P. and Whittington, N.O. and Spencer, Henry and Keppel, David and Brader, Mark},
  edition =	 {6.0},
  year =	 1990,
  month =	 jun # "~25,"
}

@Manual{Dolenc90,
  title = 	 {Notes on Writing Portable Programs in {C}},
  author =	 {Dolenc, A. and Keppel, D. and Reilly, G. V.},
  edition =	 {8th Revision},
  year =	 1990,
  month =	 nov,
  note =         {\relax{}http://www.apocalypse.org/\discretionary{}{}{}pub/\discretionary{}{}{}u/\discretionary{}{}{}paul/\discretionary{}{}{}docs/\discretionary{}{}{}cport/\discretionary{}{}{}cport.htm}
}

@InProceedings(Murphy-icse18,
  author= 	"Murphy, Gail C. and Notkin, David and Lan, Erica S.-C.",
  title= 	"An empirical study of static call graph extractors",
  booktitle= 	icse96,
  pages= 	"90--99",
  month= 	mar,
  year= 	1996
)

@book(Stroustrup-DesignEvolution,
  author=       "Stroustrup, Bjarne",
  title=        "The Design and Evolution of {C++}",
  publisher=    "Addison-Wesley",
  address =	"Reading, Massachusetts",
  year=         1994
)


@Book{CoxN91,
  author =	 "Brad J. Cox and Andrew J. Novobilski",
  title = 	 "Object Oriented Programming:  An Evolutionary Approach",
  publisher = 	 "Addison-Wesley",
  year = 	 1991,
  address =	 "Reading, Massachusetts"
}


@InProceedings(SiffR96,
  author= 	"Siff, Michael and Reps, Thomas",
  title= 	"Program generalization for software reuse: From {C} to {C++}",
  booktitle= 	FSE96,
  pages= 	"135--146",
  address =	 FSE96addr,
  month =	 FSE96date,
  year= 	1996
)

@InProceedings(OCallahan-icse97,
  author= 	"O'Callahan, Robert and Jackson, Daniel",
  title= 	"{Lackwit}: A program understanding tool based on type 
                inference",
  booktitle= 	ICSE97,
  month= 	ICSE97date,
  year= 	1997,
  pages =        "338--348",
  OMITpublisher =    "ACM Press",
)

@Book{Carroll95,
  author = 	 {Carroll, Martin D. and Ellis, Margaret A.},
  title = 	 "Designing and Coding Reusable {C++}",
  publisher = 	 "Addison-Wesley",
  address =	 "Reading, Massachusetts",
  year = 	 1995
}

@Book{Harbison91,
  author = 	 "Harbison, Samuel P. and Guy L. {Steele Jr.}",
  title = 	 "{C}: A Reference Manual",
  publisher = 	 {Prentice-Hall},
  year = 	 1995,
  address =	 "Englewood Cliffs, New Jersey",
  edition =	 "Fourth"
}

@InProceedings(Evans-fse94,
  author= 	"Evans, David and Guttag, John and Horning, Jim and Tan, Yang Meng",
  title= 	"{LCLint}: A tool for using specifications to check code",
  booktitle= 	FSE94,
  address =     FSE94addr,
  pages= 	"87--96",
  month= 	FSE94date,
  year= 	1994
)

@Manual{Evans:LCLint,
  title = 	 {{LCL}int User's Guide, Version 2.5},
  author =	 {David Evans},
  OPTorganization = {},
  OPTaddress = 	 {},
  year =	 2000,
  month =	 May,
  note =         {\url{http://lclint.cs.virginia.edu/guide/}}
}


@InProceedings{Krone94,
  author = 	 {Krone, Maren and Snelting, Gregor},
  title = 	 "On the Inference of Configuration Structures from Source Code",
  booktitle = 	 ICSE94,
  year =	 1994,
  pages =	 {49--57},
  address =	 ICSE94addr,
  month =	 ICSE94date
}

@InProceedings{WeiseC93,
  author =       "Daniel Weise and Roger Crew",
  title = 	 "Programmable Syntax Macros",
  booktitle =    PLDI93,
  year =	 1993,
  address =	 PLDI93addr,
  month =	 PLDI93date,
  pages =        "156--165"
}


@TechReport{CppAwareCAnalyses,
  author = 	 {Badros, Greg and Notkin, David},
  title = 	 {A Framework for Preprocessor-Aware {C} Source Code Analyses},
  institution =  {University of Washington},
  year = 	 1998,
  number =	 {UW-CSE-98-08-04},
  address =	 {Seattle, Washington},
  month =	 {August}
}



@article{Badros00,
    author = "Greg J. Badros and David Notkin",
    title = "A framework for preprocessor-aware C source code analyses",
    journal = SPE,
    volume = "30",
    number = "8",
    pages = "907--924",
    year = "2000",
    url = "citeseer.nj.nec.com/badros98framework.html"
}


@InProceedings{GriswoldAM96,
  author = 	 "William G. Griswold and Darren C. Atkinson and Collin McCurdy",
  title = 	 "Fast, Flexible Syntactic Pattern Matching and Processing",
  booktitle = 	 "Proceedings of the IEEE 1996 Workshop on Program Comprehension",
  pages = 	 "144--153",
  year =	 1996,
  month =	 mar # "~29--31,",
  address = 	 "Berlin, Germany",
  abstract =
   "Program understanding can be assisted by tools that match patterns in the
    program source. Lexical pattern matchers provide excellent performance and
    ease of use, but have a limited vocabulary. Syntactic matchers provide more
    precision, but may sacrifice performance, retargetability, ease of use, or
    generality.
    \par
    To achieve more of the benefits of both models, we extend the pattern
    syntax of awk to support matching of abstract syntax trees, as demonstrated
    in a tool called tawk. Its pattern syntax is language-independent, based on
    abstract tree patterns. As in awk, patterns can have associated actions,
    which in tawk are written in C for generality, familiarity, and
    performance. The use of C is simplified by high-level libraries and dynamic
    linking. To allow processing of program files containing non-syntactic
    constructs, mechanisms have been designed that allow transparent matching
    in a syntactic fashion. So far, tawk has been retargeted to the MUMPS and C
    programming languages.
    \par
    We survey and apply prototypical approaches to concretely demonstrate the
    tradeoffs. Our results indicate that tawk can be used to quickly and easily
    perform a variety of common software engineering tasks, and the extensions
    to accommodate non-syntactic features significantly extend the generality
    of syntactic matchers."
}


@InProceedings{Crew97,
  author = 	 "Roger F. Crew",
  title = 	 "{ASTLOG}: a language for examining abstract syntax trees",
  booktitle =	 "Proceedings of the  USENIX Conference on Domain-Specific Languages",
  pages =	 "229--242",
  year =	 1997,
  address =	 "Santa Barbara, CA",
  month =	 oct
}

@Article{PaulP94,
  title =        "A framework for source code search using program
                 patterns",
  author =       "S. Paul and A. Prakash",
  journal =      "IEEE Transactions on Software Engineering",
  pages =        "463--475",
  volume =       "20",
  number =       "6",
  year =         "1994",
  sender =       "x@wins.uva.nl",
  class =        "Reverse_Engineering, Reverse_Design,
                 Fundamental_Methods_in_Reverse_Design,
                 Source_Code_Queries",
}






@Misc{Gimpel,
  author =	 "{Gimpel Software}",
  title =	 "{PC}-lint/{F}lexe{L}int",
  howpublished = "\url{http://www.gimpel.com/lintinfo.htm}",
  year =	 1999
}


@InProceedings{SpencerC92,
  author = 	 "Henry Spencer and Geoff Collyer",
  title = 	 "\#ifdef Considered Harmful, or Portability Experience with {C} {N}ews",
  booktitle = 	 USENIX92Summer,
  year =	 1992,
  address =	 USENIX92Summeraddr,
  month =	 USENIX92Summerdate,
  pages =	 "185--197",
  url = 	 "http://9www.x.bell-labs.com/user/geoff/ifdefs.ps.Z",
}


@TechReport{Johnson77,
  title =        "Lint, a {C} Program Checker",
  author =       "S. C. Johnson",
  type =         "Computing Science TR",
  number =       "65",
  month =        sep,
  year =         "1977",
  institution =  "Bell Labs",
  address =      "Murray Hill, NJ",
  keywords =     "CSTR",
  ignore-note =         "Updated version TM 78-1273-3",
}

@book{commonlisp:languagespec,
  title="Common Lisp: The Language",
  author="Guy L. {Steele Jr.}",
  publisher="Digital Press",
  address="Bedford, MA",
  note="Second edition",
  year=1990
}


@Article{Clinger91:R4RS,
  author =       "William Clinger and Jonathan A. Rees",
  title =        "The Revised\(^{4}\) Report on the Algorithmic Language
                 {S}cheme",
  journal =      "ACM LISP Pointers",
  volume =       "4",
  number =       "3",
  year =         "1991",
}


@Article{KelseyCR98,
  title = 	 "The Revised\(^{5}\) Report on the Algorithmic Language
                 {S}cheme",
  author = 	 "Richard Kelsey and William Clinger and Jonathan A. Rees",
  journal =      "ACM SIG{\-}PLAN Notices",
  volume =       33,
  number =       9,
  pages =        "26--76",
  month =        sep,
  year =         1998,
  coden =        "SINODQ",
  ISSN =         "0362-1340",
  bibdate =      "Tue Sep 15 17:01:28 1998",
  note =         "With H. Abelson, N. I. {Adams, IV}, D. H. Bartley, G.
                 Brooks, R. K. Dybvig, D. P. Friedman, R. Halstead, C.
                 Hanson, C. T. Haynes, E. Kohlbecker, D. Oxley, K. M.
                 Pitman, G. J. Rozas, G. L. {Steele, Jr.}, G. J.
                 Sussman, and M. Wand.",
  acknowledgement = ack-nhfb,
}


@InProceedings{lfp86*151,
  author =       "Eugene Kohlbecker and Daniel P. Friedman and Matthias
                 Felleisen and Bruce Duba",
  title =        "Hygienic Macro Expansion",
  pages =        "151--181",
  ISBN =         "0-89791-200-4",
  editor =       "Richard P. Gabriel",
  booktitle =    "Proceedings of the {ACM} Conference on {LISP} and
                 Functional Programming",
  address =      "Cambridge, MA",
  month =        aug,
  year =         "1986",
}

@Book{kicz91,
  author =       "Gregor Kiczales and Jim des Rivi\`{e}res and Daniel G.
                 Bobrow",
  title =        "The Art of the Metaobject Protocol",
  publisher =    "MIT Press",
  year =         "1991",
  entered-by =   "Andreas Paepcke",
  keywords =     "CLOS, MOP",
  comments =     "This is the official citation for the MOP spec. It can
                 also be used as a citation for an intro to the *idea*
                 of a MOP.",
}



@InProceedings{Favre96,
  author = 	 "Jean-Marie Favre",
  title = 	 "Preprocessors from an abstract point of view",
  booktitle = 	 "International Conference on Software Maintenance (ICSM'96)",
  year =	 1996,
  publisher =	 "IEEE Computer Society Press",
  address =	 "Monterey, California",
  month =	 nov # "~4--8,"
}


@InProceedings{Favre95,
  author = 	 "Jean-Marie Favre",
  title = 	 "The {CPP} paradox",
  booktitle = 	 "9th European Workshop on Software Maintenance",
  year =	 1995,
  address =	 "Durham, England",
  month =	 sep # "~25--27,"
}


@TechReport{SpulerS92,
  author = 	 "David A. Spuler and A. Sayed Muhammed Sajeev",
  title = 	 "Static detection of preprocessor macro errors in {C}",
  institution =  "James Cook University",
  year = 	 1992,
  number =	 "92/7",
  address =	 "Townsville, Australia",
  URL = 	 "http://www.cs.jcu.edu.au/ftp/pub/techreports/92-7.ps.gz",
}


@Unpublished{Lindig98:dagstuhl,
  author = 	 "Christian Lindig",
  title = 	 "Analysis of Software Variants",
  note = 	 "Talk at Schloss Dagstuhl Seminar on Program Comprehension
		  and Software Reengineering",
  year =	 1998,
  month =	 mar # "~9--13,"
}


@TechReport{lindig/98/tr-98-04,
  author =       "Christian Lindig",
  title =        "Analyse von Softwarevarianten",
  institution =  "TU Braunschweig, Institut f{\"u}r Programmiersprachen
                 und Informationssysteme, Abt. Softwaretechnologie",
  year =         "1998",
  type =         "Informatik-Bericht",
  number =       "98-04",
  address =      "D-38106 Braunschweig",
  month =        jan,
  annote =       "Software-Quelltexte werden oft durch den Einsatz eines
                 Pr{\"a}prozessors an verschiedenen Zielplattformen
                 angepa{\"s}t. Aus einem Quelltext entstehen dabei durch
                 den Pr{\"a}prozessor verschiedene Varianten der
                 Software, die einen Variantenverband bilden. Formale
                 Begriffsanalyse ist eine mathematische Theorie, mit
                 deren Hilfe der Variantenverband von Quelltexten
                 effizient bestimmt werden kann. Dar{\"u}berhinaus
                 k{\"o}nnen Redundanzen in der Beschreibung der
                 Variantenstruktur entdeckt und entfernt werden.",
}



@InProceedings{AtkinsBGM99,
  author = 	 "David Atkins and Thomas Ball and Todd Graves and Audris Mockus",
  title = 	 "Using Version Control Data to Evaluate the Impact of Software Tools",
  booktitle = 	 icse99,
  pages = 	 "324--333",
  year =	 1999,
  address =	 "Los Angeles, CA",
  month =	 may # "~19--21,"
}


% This might be the right reference for the VE editor.



% This doesn't look like the right reference for the VE editor.





@Book{Zipf49,
  author =	 "George Kingsley Zipf",
  title = 	 "Human Behavior and the Principle of Least Effort",
  publisher = 	 "Addison-Wesley",
  year = 	 1949,
  address =	 "Cambridge, MA"
}


@InProceedings{ICCC::Salomon1996,
  title =        "Using Partial Evaluation in Support of Portability,
                 Reusability, and Maintainability",
  author =       "Daniel J. Salomon",
  booktitle =    "Compiler Construction, 6th International Conference",
  pages =        "208--222",
  editor =       "Tibor Gyimothy",
  address =      "Link{\"o}ping, Sweden",
  month =        "24--26~" # apr,
  year =         "1996",
  series =       "Lecture Notes in Computer Science",
  volume =       "1060",
  publisher =    "Springer",
  ISBN =         "ISBN 3-540-61053-7",
}


@Article{MeyersK97,
  author = 	 "Scott Meyers and Martin Klaus",
  title = 	 "Examining {C}++ program analyzers",
  journal = 	 "Dr.~Dobb's Journal",
  year = 	 1997,
  volume =	 22,
  number =	 2,
  pages =	 "68,70--2,74--5,87",
  month =	 feb
}


@Book{Meyers97,
  author =	 "Scott Meyers",
  title = 	 "Effective C++",
  publisher = 	 "Addison-Wesley",
  year = 	 1997,
  NEEDaddress = 	 "",
  edition =	 "second"
}


@InCollection{DavisDL90,
  author =	 "J.S. Davis and M.J. Davis and M.M. Law",
  title = 	 "Comparison of subjective entropy and user estimates of software complexity",
  booktitle = 	 "Empirical Foundations of Information and Software Science",
  publisher = 	 "V. Plenum",
  year = 	 1990,
  address =	 "New York, NY, USA"
}


@Misc{Lott-metrics-tools,
  author =	 "Christopher Lott",
  title =	 "Metrics collection tools for {C} and {C}++ Source Code",
  howpublished = "\url{http://www.cs.umd.edu/users/cml/cmetrics/}",
  year =	 1998
}


@InProceedings{Engblom99,
  author = 	 "Jakob Engblom",
  title = 	 "Static Properties of Commercial Embedded Real-Time
		  Programs, and Their Implication for Worst-Case Execution
		  Time Analysis",
  booktitle = 	 "Proceedings of the 5th IEEE Real-Time Technology and
		  Applications Symposium (RTAS '99)",
  OPTcrossref =  "",
  OPTkey = 	 "",
  OPTpages = 	 "",
  year = 	 "1999",
  OPTeditor = 	 "",
  OPTvolume = 	 "",
  OPTnumber = 	 "",
  OPTseries = 	 "",
  address = 	 "Vancouver, Canada",
  month = 	 jun,
  OPTorganization = "",
  OPTpublisher = "",
  OPTnote = 	 "",
  OPTannote = 	 ""
}


@InProceedings{McCloskeyB2005,
  author = 	 "Bill McCloskey and Eric Brewer",
  title = 	 "{ASTEC}: a new approach to refactoring {C}",
  booktitle =	 FSE2005,
  pages =	 "21--30",
  year =	 2005,
  address =	 FSE2005addr,
  month =	 FSE2005date,
  abstract =
   "The C language is among the most widely used in the world, particularly for
    critical infrastructure software. C programs depend upon macros processed
    using the C preprocessor, but these macros are difficult to analyze and are
    often error-prone[4]. Existing tools that analyze and transform C source
    code have rudimentary support for the preprocessor, leading to obscure
    error messages and difficulty refactoring. We present a three part
    solution:  (1) a replacement macro language, ASTEC, that addresses the most
    important important deficiencies of the preprocessor and that eliminates
    many of the errors it introduces; (2) a translator, MACROSCOPE, that
    converts existing code into ASTEC semi-automatically; and (3), an
    ASTEC-aware refactoring tool that handles preprocessor constructs
    naturally.
    \par
    ASTEC's primary benefits are its analyzability and its refactorability. We
    present several refactorings that are enabled by ASTEC. Additionally, ASTEC
    eliminates many of the sources of errors that can plague C preprocessor
    macros; Ernst et al.[4] estimate that more than 20\% of macros may contain
    errors. In this paper, we describe our translation and refactoring tools
    and evaluate them on a suite of programs including OpenSSH and the Linux
    kernel."
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% I haven't yet read the following articles.
%%%

@InProceedings{favre:97,
  author =       "Jean-Marie Favre",
  title =        "{CPP} Denotational Semantics and its Application to
                 Software Maintenance",
  booktitle =    "1st Euromicro Working Conference on Software
                 Maintenance and Reengineering CSMR 97",
  month =        mar,
  year =         "1997",
  publisher =    "IEEE Computer Society Press",
  abstract =     "Very often, portability of large software products is
                 achieved via the empirical use of old tools like CPP,
                 the preprocessor of the C language. Though powerful low
                 level features like conditional compilation cause
                 serious maintenance problems. There is a lack of
                 adequate tools to support such activities. This paper
                 presents our approach to this problem. We introduce
                 APP, an abstract language semantically equivalent to
                 CPP but based on traditional programming-in-the-small
                 concepts. A rigorous description of the semantics of
                 this language makes it possible to develop reliable
                 reverse engineering tools.",
  class =        "Reverse_Engineering, Reverse_Design,
                 Configuration_Structures",
  sender =       "antonio@ifi.unizh.ch",
}













@InProceedings{LivadasS94,
  author = 	 "Panos E. Livadas and David T. Small",
  title = 	 "Understanding code containing preprocessor constructs",
  booktitle = 	 "IEEE Third Workshop on Program Comprehension",
  year =	 1994,
  address =	 "Washington, DC, USA",
  month =	 nov # "~14--15,",
  pages =	 "89--97"
}

@Article{ABACUS89,
  key =          "Abacus",
  author =       "A. Abacus",
  title =        "Parameterizing {C} Code at Compile and Run Time",
  journal =      "Structured Programming",
  publisher =    "Springer-Verlag",
  volume =       "10",
  number =       "4",
  year =         "1989",
  pages =        "209--214",
  keywords =     "parameterization; C; debugging; imbedded debugging
                 code; C preprocessor",
  abstract =     "This paper describes a convenient mechanism for
                 imbedding debugging code within the source code of
                 programs written in C. Debugging code can be packaged
                 into any number of functionally independent debugging
                 units. Conditional compilation of each unit is
                 controlled by a separate compile time switch. Execution
                 of each compiled unit is controlled by a separate run
                 time switch. Efficient final products can be generated
                 by turning off compile time switches of all debugging
                 units. This packaging method depends on the C
                 preprocessor and its final refinement depends on the
                 ability of the compiler to perform 'dead code removal'
                 optimization. Each routine or a family of related
                 routines can be parameterized independently of other
                 routines. Run time options of library routines can be
                 changed without access to their source code. This
                 parameterization is not restricted to debugging code.
                 The same mechanism may be used to select one of several
                 implementations of a feature, or to set initial values
                 of variables.",
  bibdate =      "Tue Nov 7 08:25:39 1989",
  owner =        "robyn",
}

@Article{Mudd:1990:ACD,
  author =       "John Mudd",
  title =        "Automating {C} Debugging with Preprocessor Macros",
  journal =      "Computer Language Magazine",
  volume =       "7",
  number =       "2",
  pages =        "69--??",
  month =        feb,
  year =         "1990",
  coden =        "COMLEF",
  ISSN =         "0749-2839",
  bibdate =      "Tue Jan 23 08:04:25 MST 1996",
  acknowledgement = ack-nhfb,
}

@Article{Allison:1994:P,
  author =       "Chuck Allison",
  title =        "The Preprocessor",
  journal =      "C Users Journal",
  volume =       "12",
  type =         "Code Capsules",
  number =       "3",
  pages =        "101--??",
  month =        mar,
  year =         "1994",
  ISSN =         "0898-9788",
  bibdate =      "Fri Aug 30 16:52:23 MDT 1996",
  acknowledgement = ack-nhfb,
}

%% These resulted from an online search for "Cpp"

@Article{Parks:JCLT-2-3-194,
  author =       "John H. Parks",
  title =        "Case Study: Building an {ANSI CPP}",
  journal =      "The Journal of {C} Language Translation",
  volume =       "2",
  number =       "3",
  pages =        "194--206",
  month =        dec,
  year =         "1990",
  ISSN =         "1042-5721",
  bibdate =      "Fri Nov 21 15:06:25 1997",
  acknowledgement = ack-nhfb,
  remark =       "A thorough look at the issues involved in building an
                 ideal preprocessor that can be user-configurable to
                 support ANSI C and most common extensions.",
}


@Article{Hazard:1991:UCA,
  author =       "William P. Hazard",
  title =        "Using cpp to Aid Portability",
  journal =      "Computer Language Magazine",
  volume =       "8",
  number =       "11",
  pages =        "49--??",
  month =        nov,
  year =         "1991",
  coden =        "COMLEF",
  ISSN =         "0749-2839",
  bibdate =      "Tue Jan 23 08:04:25 MST 1996",
  acknowledgement = ack-nhfb,
}

@InProceedings{Locanthi:1987:FBA,
  author =       "Bart N. Locanthi",
  title =        "Fast bitblt() with asm() and cpp",
  editor =       "{USENIX Association}",
  booktitle =    "{EUUG} Conference Proceedings, Autumn, 1987. Dublin,
                 Ireland",
  publisher =    "EUUG",
  address =      "Buntingford, Herts, UK",
  month =        "Autumn",
  year =         "1987",
  pages =        "243--259",
  bibdate =      "Tue Feb 20 15:42:13 MST 1996",
  acknowledgement = ack-nhfb,
  affiliation =  "AT\&T Bell Laboratories, Murray Hill",
}

@Article{Ream:1990:CCV,
  author =       "Edward K. Ream",
  title =        "{CUG319 CPP v5.3}",
  journal =      "C Users Journal",
  volume =       "8",
  type =         "CUG New Release",
  number =       "7",
  pages =        "111--??",
  month =        jul,
  year =         "1990",
  ISSN =         "0898-9788",
  bibdate =      "Fri Aug 30 16:52:23 MDT 1996",
  acknowledgement = ack-nhfb,
}




@Manual{Scwm,
  title = 	 "Scwm Reference Manual:  The Authoritative Guide to the {E}macs of Window Managers",
  author =	 "Maciej Stachowiak and Greg J. Badros",
  year =	 1999,
  note =	 "http://vicarious-existence.mit.edu/scwm/"
}



% LocalWords: TechReport ellemtel inline InProceedings McCloskeyB FSE
% LocalWords: McCloskey ASTEC booktitle addr MACROSCOPE ASTEC's al CPP
% LocalWords: analyzability refactorability OpenSSH args ASTs ifdef
% LocalWords: Macroscope ASTLOG
